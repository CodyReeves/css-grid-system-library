////
/// Map Helpers
/// @group map-helpers
////

/// @name Contains
/// If List Has Value
/// @param {list} $list - List
/// @param {key} $value - What value you would like to search for
/// @return {Bool} True if value is found

@function contains($list, $value) {
  $result: false;
  @each $item in $list {
    @if $item == $value {
      $result: true;
    }
  }
  @return $result;
}

/// @name Gets Deep Map
/// Gets a deep map value (nested map)
/// @param {map} $map - The containing map
/// @param {key} $keys - What key you would like to pull the deep map from
/// @return {Map} The map associated with the key

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// @name Validate Key
/// Checks to see if a key exists, if it does returns data
/// @param {key} $key - A key
/// @param {map} $map - The map containing data required to create
/// @returns {Map} A map including the query string and required vars that corilate with the $key

@function validate-key($key, $map) {
  $return-value: ();
  @if map-has-key($map, $key) {
    $return-value: map-deep-get($map, $key);
  } @else {
    @error '`#{$key}` is not a valid query.';
  }
  @return $return-value;
}


/// @name List To Map
/// Converts a list to a map
/// @param {list} $query - Your list
/// @returns {List} list in a map format
/// @example
///    convert-to-map(sm 40px lg 80px) // (sm: 40px, lg: 80px)
///    convert-to-map(1 value1 2 value2) // (1: value1, 2: value2)

@function convert-to-map($query) {
  $return-value: ();
  $count: 1;
  $length-value: length($query);

  @while $count <= $length-value {
    $key: nth($query, $count);

    @if $key {
      $name: nth($key, 1);
      $value: nth($key, 2);
      $return-value: map-merge($return-value, ($name: $value));
      $query: set-nth($query, $count, null);
    } @else if $key == null or $key == '' {
      @error '#{$key} returns null';
    }
    $count: $count + 1;
  }
  @return $return-value;
}

/// @name Merges Mutiple Maps
/// Merge those maps!
/// @param {list} $maps - A list of maps that you would like merged
/// @return {Map} A single map that contains all maps that were within inital list

@function map-collect($maps...) {
  $collection: ();

  @each $map in $maps {
    $collection: map-merge($collection, $map);
  }
  @return $collection;
}

/// @name Map Set
/// @group map-helpers
/// @param {map} $map - A map
/// @param {key} $keys - A key to search within
/// @param {intiger | string} $value - A value you wish to set
/// @return {Map} a map with set value

@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

/// @name Map Deep Set
/// @group map-helpers
/// @param {map} $map - A map
/// @param {list} $keys - A list of keys to search within
/// @param {intiger | string} $value - A value you wish to set
/// @return {Map} a map with set value

@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == 'map' {
    @warn 'The last key you specified is a map; it will be overrided with `#{$value}`.';
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error 'Key `#{$key}` doesnt exist at current level in map.';
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

/// @name jQuery-style extend function
/// only takes 2 arguments
/// is not recursive
/// @param {map} $map - first map
/// @param {list} $maps - other maps
/// @param {boolean} $deep - recursive mode
/// @return {map}

@function map-extend($map, $maps.../*, $deep */) { // sass-lint:disable-line no-css-comments
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
          // Recursive extend
          $value: map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}

/// Compute the maximum depth of a map
/// @param {map} $map
/// @return {number} max depth of `$map`

@function depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == 'map' {
      $level: max(depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// @name Joins all elements of single dimensional $list with $glue
/// @param $list {List} - list
/// @param $glue {String} - value to use as a join string
/// @return {String}
@function map-merge-recursive($map1, $map2) {
  $ret: $map1;

  @each $key, $value in $map2 {
    @if map-get($ret, $key) != null and type-of($value) == map and type-of(map-get($ret, $key)) == map {
      // Keys that start with `!` override rather than merge
      @if str-index($key, '!') == null {
        $value: map-merge-recursive(map-get($ret, $key), $value);
      }
    }

    @if _is-string($key) {
      // Keys that start with `!` override rather than merge
      @if str-index($key, '!') == 1 {
        // Remove the `!` from $key
        $key: str-slice($key, 2);
        $ret: map-remove($ret, $key);
      }
    }

    $ret: map-merge($ret, ($key: $value));
  }

  @return $ret;
}
